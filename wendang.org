* xonsh
** add path to xonsh
#+BEGIN_SRC
vim ~/.xonshrc
$PATH.append(p"/path/to/directory")
source ~/.xonshrc
#+END_SRC
** set xonsh default shell
#+BEGIN_SRC
$ which xonsh  'add path to /etc/shells
$ chsh -s /usr/bin/xonsh
#+END_SRC
if don't work just reboot
* postgresql(https://github.com/malnvenshorn/OctoPrint-FilamentManager/wiki/Setup-PostgreSQL-on-Arch-Linux#configure-postgresql-for-local-network)
** postgresql install
*** Install postgresql package:
#+BEGIN_SRC
$ sudo pacman -S postgresql
#+END_SRC
*** Create a new database cluster:
#+BEGIN_SRC
$ sudo -u postgres -i initdb --locale $LANG -E UTF8 -D /var/lib/postgres/data
#+END_SRC
*** Start and enable postgresql
#+BEGIN_SRC
$ sudo systemctl start postgresql.service
$ sudo systemctl enable postgresql.service
#+END_SRC
** creat new user and database
*** Switch to the postgres user:
#+BEGIN_SRC
$ sudo -u postgres -i
#+END_SRC
*** Create user aki:
#+BEGIN_SRC
[postgres]$ createuser --interactive -P
Enter name of role to add: aki
Enter password for new role:
Enter it again:
Shall the new role be a superuser? (y/n) n
Shall the new role be allowed to create databases? (y/n) n
Shall the new role be allowed to create more new roles? (y/n) n
#+END_SRC
*** Create database aki_filamentmanager:
#+BEGIN_SRC
[postgres]$ createdb -O aki aki_filamentmanager
#+END_SRC
** Configure PostgreSQL for local network
*** In the /var/lib/postgres/data/postgresql.conf change the line with listen_addresses to
listen_addresses = '*'
*** Then append the following line to /var/lib/postgres/data/pg_hba.conf
host aki_filamentmanager aki 192.168.178.0/24 md5
** usage
#+BEGIN_SRC
$ sudo -u postgres -i
[postgres]$ psql
postgres=#
#+END_SRC
** another efficent path
#+BEGIN_SRC
$ sudo pacman -S postgresql
$ sudo -u postgres -i initdb --locale $LANG -E UTF8 -D /var/lib/postgres/data
$ systemctl enable postgresql
$ systemctl start postgresql
$ sudo -u postgres -i
[postgres@aki-pc ~]$ createdb aki
[postgres@aki-pc ~]$ psql aki
aki=# create role akii with superuser login createdb;
aki=# set role akii;
aki=# select current_user;
aki=# \du      'list roles
aki=# \l       'list databases
#+END_SRC
* postgresql manual:http://www.postgres.cn/docs/10/
** install
#+BEGIN_SRC
$ git clone https://git.postgresql.org/git/postgresql.git
$ cd postgresql
$ ./configure
$ make
$ sudo make install
#+END_SRC
** configure
#+BEGIN_SRC
$ sudo /sbin/ldconfig /usr/local/pgsql/lib
#+END_SRC
take following into ~/.xonshrc
#+BEGIN_SRC
$ $PATH.append('/usr/local/pgsql/bin')
#+END_SRC
* proxychains
** pip
#+BEGIN_SRC
pip install pysocks
pip install <yourpacakge> --proxy socks5:127.0.0.1:1092
#+END_SRC
** git
#+BEGIN_SRC
$ cd ~/.gitconfig
[user]
        name = akikaede6
        email = akikaede6@gmail.com
[github]
        user = akikaede6
[http]
        proxy = socks5://127.0.0.1:1092
#+END_SRC
* sql
** create table
create.sql
** insert
insert.sql
** select
SELECT * FROM flights
*means all the colunms
*can replaced by other colum names
also can add **WHERE** to select rows
argument of *WHERE* can be = > < and also boolean etc
*also can be functions such as AVG() COUNT() MIN() IN('') LIKE('')
LIMIT number only select 2 rows
ORDER BY duration ASC(from smallest to largest); DESC(from largest to smallest)
GROUP BY origin can group the same origin as a set
HAVING COUNT(*) > 1
** update
update.sql
** delete
delete.sql
** join
take tables as a group, make them related
#+BEGIN_SRC
SELECT origin, destination, name FROM flights INNER JOIN passengers ON passengers.flight_id = flights.id;
SELECT origin, destination, name FROM flights JOIN passengers ON passengers.flight_id = flights.id;
SELECT origin, destination, name FROM flights LEFT OUTER JOIN passengers ON passengers.flight_id = flights.id;
;which can display flights don't have passengers
SELECT origin, destination, name FROM flights RIGHT OUTER JOIN passengers ON passengers.flight_id = flights.id;
#+END_SRC
** sql injection
log in
#+BEGIN_SRC
SELECT * FROM users WHERE (username = 'username') AND (password = 'password');
#+END_SRC
** SQLAIchemy
*** list.py
*** import.py ;;import flights.csv into list.py
#+BEGIN_SRC
import csv
import os

from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker

engine = create_engine("postgresql://postgres:aki@localhost:5432/aki_filamentmanager")
db = scoped_session(sessionmaker(bind=engine))

def main():
    f = open("flights.csv")
    reader = csv.reader(f)
    for origin, destination, duration in reader:
;;origin, destnation, duration are colums in flights.csv
        db.execute("INSERT INTO flights (origin, destination, duration) VALUES (:origin, :destination, :duration)",
                        {"origin": origin, "destination": destination, "duration": duration})
;;fore origin is the colums, after origin is placeholder
        print(f"Added flight from {origin} to {destination} lasting {duration} minutes.")
    db.commit()
;;save changes i have made

if __name__ == "__main__":
    main()
#+END_SRC
*** passengers.py
#+BEGIN_SRC
import os

from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker

engine = create_engine("postgresql://postgres:aki@localhost:5432/aki_filamentmanager")
db = scoped_session(sessionmaker(bind=engine))

def main():

    # List all flights.
    flights = db.execute("SELECT id, origin, destination, duration FROM flights").fetchall()
    for flight in flights:
        print(f"Flight {flight.id}: {flight.origin} to {flight.destination}, {flight.duration} minutes.")

    # Prompt user to choose a flight.
    flight_id = int(input("\nFlight ID: "))
    flight = db.execute("SELECT origin, destination, duration FROM flights WHERE id = :id",
                        {"id": flight_id}).fetchone()

    # Make sure flight is valid.
    if flight is None:
        print("Error: No such flight.")
        return

    # List passengers.
    passengers = db.execute("SELECT name FROM passengers WHERE flight_id = :flight_id",
                            {"flight_id": flight_id}).fetchall()
    print("\nPassengers:")
    for passenger in passengers:
        print(passenger.name)
    if len(passengers) == 0:
        print("No passengers.")

if __name__ == "__main__":
    main()
#+END_SRC
*** airlnie0->application.py
#+BEGIN_SRC
{% extends "layout.html" %}

{% block title %}
    Flights
{% endblock %}

{% block body %}
    <h1>Book a Flight</h1>

    <form action="{{ url_for('book') }}" method="post">

        <div class="form-group">
            <select class="form-control" name="flight_id">       ;;class to tell bootstrap to have a form
                {% for flight in flights %}
                    <option value="{{ flight.id }}">{{ flight.origin }} to {{ flight.destination }}</option>
                {% endfor %}
            </select>
        </div>

        <div class="form-group">
            <input class="form-control" name="name" placeholder="Passenger Name">
        </div>

        <div class="form-group">
            <button class="btn btn-primary">Book Flight</button>
        </div>

    </form>
{% endblock %}
#+END_SRC
*** airline1->application.py
*** before run above files do:
#+BEGIN_SRC
pip install psycopg2-binary
#+END_SRC
change file engine as:
#+BEGIN_SRC
  engine = create_engine("postgresql://postgres:akii@localhost:5432/aki")
#+END_SRC
* API
** class
class1.py
class2.py
class3.py to delay itself
* doom
** change doom font size
#+BEGIN_SRC
(setq doom-font (font-spec :family "monospace" :size (if (>(x-display-pixel-width )1920 )24 14)))
#+END_SRC
** doom sandbox
#+BEGIN_SRC
M-x: doom-sandbox(spc-h-d -> x)
;; - vanilla Emacs (nothing loaded)         C-c C-c
;; - Doom + modules - your private config   C-c C-p
#+END_SRC
** pyim install
#+BEGIN_SRC
**~/.emacs.d/init.el**
active ;;chinese
**command**
doom upgrde
config as: https://github.com/akikaede6/.doom.d/commit/cb897da6cac277799022d2a8990fb9de9eec39a6
package-refresh
#+END_SRC
** doom doctor to find error
#+BEGIN_SRC
~/.emacs.d/.local/straight/build to check built packages with
~/.emacs.d/.local/straight/repos
#+END_SRC
** org-protocol
#+BEGIN_SRC
add following:
https://github.com/akikaede6/.doom.d/commit/29e4caf18ef5a044d61821716f9d91f438b2fd33
**xonsh**
emacsclient -n "org-protocol:///capture?url=http%3a%2f%2fduckduckgo%2ecom&title=DuckDuckGo"
add this path as a new bookmark in chrome:
javascript:location.href="org-protocol:///capture?url="+encodeURIComponent(location.href)+"&title="+encodeURIComponent(document.title||"[untitled page]")
#+END_SRC
** eaf
https://github.com/manateelazycat/emacs-application-framework
** ssh-key and gpg
https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh
https://help.github.com/en/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account
in config.el change gpgkey
#+BEGIN_SRC
transient-values '((magit-commit "--gpg-sign=A814p&U$uI0$ ")
                         (magit-rebase "--autosquash" "--gpg-sign=0E271AE90CF21E77")
                         (magit-pull "--rebase" "--gpg-sign=0E271AE90CF21E77")
#+END_SRC
** install a private local package
put package in ~/.doom.d/lisp/my-private-package.el
in ~/.doom.d/config.el
#+BEGIN_SRC
(load! "lisp/my-private-package")
#+END_SRC
* github
** pr
#+BEGIN_SRC
**github**

fork file to own repo

git clone https://github.com/akikaede6/Black-RX

**emacs**

M-x

magit-branch-create fix/cmake

magit-checkout fix/cmake

magit-stage-file select file name

magit-commit  c  write commit message

magit-push choose remote to push

**github**

compare and pull request
#+END_SRC
** git proxy
in ~/.gitconfig
#+BEGIN_SRC 
[user]
        name = aki
        email = akikaede6@gmail.com
[github]
        user = akikaede6
[http]
        proxy = socks5://127.0.0.1:1092
#+END_SRC
** git remote
#+BEGIN_SRC
git remote set-url origin git@github.com:name/repo.git
#+END_SRC
* vim
** alternate the same word
#+BEGIN_SRC
 v: visual mode
 choose word then Alt-d find the same words
 x:delete word
 a:get in insert mode
 shift insert: insert pasted words
#+END_SRC
* lisp
** how to switch eshells
#+BEGIN_SRC
(require 'cl-lib)

(defun select-or-create (arg)
  "commentary"
  (if (string = arg "New eshell")
      (eshell t)
    (switch-to-buffer arg)
    )
  )

(defun eshell-switcher (&optional arg)
  "docstring"
  (interactive)
  (let* (
        (buffers (cl-remove-if-not (lambda (n) (eq (buffer-local-value 'major-mode n) 'eshell-mode)) (buffer-list)))
        (num-buffers (length buffers))     ;the number of eshells
        (in-eshellp (eq major-mode 'eshell-mode))   ;if you are in a eshell
        (names (mapcar (lambda (n) (buffer-name n)) buffers))
        )
    (cond
     (  (eq num-buffers 0) (eshell (or arg t)) )    ;if there is no eshell, open a eshell
     (  (not in-eshellp) (switch-to-buffer (car buffers)) )   ;if not in eshell buffer, get into the most recent eshell
     (t (select-or-create (completing-read "Select eshell: "
                                           (cons "New eshell" names))))
     )
  )
)
(mapcar (lambda (n) (buffer-name n)) (buffer-list))           ;list buffer names
(eshell-switcher)

(setq bl (buffer-list))   ;list buffer
(car bl)   ;the most recent buffer
(buffer-local-value 'major-mode (car bl))

(cl-remove-if-not (lambda (n) (eq (buffer-local-value 'major-mode n) 'eshell-mode))
                  (buffer-list))

(eshell "two")
(completing-read "Enter a selection" '("item 1" "item 2" "a third item"))
#+END_SRC
* dolphin
dbus-launch dolphin
* gentoo install
** boot manjaro into usb
#+BEGIN_SRC
$ sudo pacman-mirrors -i -c China -m rank
$ sudo pacman -Syy
$ sudo pacman -S vim tmux
$ tmux new -s name
#+END_SRC
** file system
#+BEGIN_SRC
$ mkfs.vfat /dev/sda1
$ mkfs.ext4 /dev/sda3
$ mkswap /dev/sda2
$ swapon /dev/sda2
#+END_SRC
** mount boot
#+BEGIN_SRC
$ mkdir /mnt/gentoo
$ mount /dev/sda3 /mnt/gentoo
#+END_SRC
** install stage
#+BEGIN_SRC
$ cd /mnt/gentoo
$ wget <link> 'mirror package
$ tar vxpf stage3-amd64-20200208.tar.bz2 --xattrs-include='*.*' --numeric-owner
$ vim /mnt/gentoo/etc/portage/make.conf
#+END_SRC
CPU_FLAGS_X86 is after emerge --sync
#+BEGIN_SRC
emerge --ask app-portage/cpuid2cpuflags
cpuid2cpuflags #将输出值改入CPU_FLAGS_X86
#+END_SRC
#+BEGIN_SRC
CFLAGS="-march=native -O2 -pipe"
CXXFLAGS="${CFLAGS}"
CPU_FLAGS_X86="aes avx avx2 fma3 mmx mmxext pclmul popcnt sse sse2 sse3 sse4_1 sse4_2 ssse3"
MAKEOPTS="-j7"
USE="-bindist -mysql"
PORTDIR="/usr/portage"
DISTDIR="${PORTDIR}/distfiles"
PKGDIR="${PORTDIR}/packages"
# GENTOO_MIRRORS="https://mirrors.tuna.tsinghua.edu.cn/gentoo/"
GENTOO_MIRRORS="https://mirrors.ustc.edu.cn/gentoo/"
EMERGE_DEFAULT_OPTS="--ask --verbose=y --keep-going --with-bdeps=y --load-average"
# FEATURES="${FEATURES} -userpriv -usersandbox -sandbox"
ACCEPT_KEYWORDS="~amd64"
ACCEPT_LICENSE="*"
# Language
L10N="en-US zh-CN en zh"
LINGUAS="en_US zh_CN en zh"
VIDEO_CARDS="nvidia"
#+END_SRC






**
导入终端输出进文件
comman &> log
gcc fail
emerge -1O glibc
* v2ray
#+BEGIN_SRC 
$ sudo pacman -S v2ray
$ sudo vim /etc/v2ray/config.json
$ sudo systemctl start v2ray.service
$ sudo systemctl enable v2ray.service
#+END_SRC
